#!/bin/bash

CONFIGURATION=$1
if [ -z $CONFIGURATION ]; then
  CONFIGURATION=Debug
fi

SCRIPTDIR=$(dirname ${BASH_SOURCE[0]})

# convert to an absolute path because it is required by `dotnet publish`
pushd $SCRIPTDIR
SCRIPTDIR=$(pwd)
popd

SRCDIR=$SCRIPTDIR/../..
ROOTDIR=$SRCDIR/..
BUILDOUTPUT=$ROOTDIR/BuildOutput 
PUBLISHDIR=$ROOTDIR/Publish

if [ ! -d $BUILDOUTPUT ]; then
  mkdir $BUILDOUTPUT
fi

PACKAGES=$ROOTDIR/packages 

# Build the ProjFS kext and libraries
$SRCDIR/ProjFS.Mac/Scripts/Build.sh $CONFIGURATION || exit 1

# Build GVFS

# Until GVFS.PreBuild is fully set up for MacOS, generate GitVersionConstants here.
BUILDDIR=$BUILDOUTPUT/GVFS.Build 
if [ ! -d $BUILDDIR ]; then
  mkdir $BUILDDIR || exit 1
fi

echo '// This file is auto-generated by GVFS.PreBuild.GenerateGitVersionConstants. Any changes made directly in this file will be lost.
using GVFS.Common.Git;

namespace GVFS.Common
{
    public static partial class GVFSConstants
    {
        public static readonly GitVersion SupportedGitVersion = new GitVersion(2, 17, 0, "gvfs", 1, 123);
    }
}' > $BUILDDIR/GVFSConstants.GitVersion.cs  || exit 1

DOTNETCONFIGURATION=$CONFIGURATION.Mac
dotnet restore $SRCDIR/GVFS.sln /p:Configuration=$DOTNETCONFIGURATION --packages $PACKAGES || exit 1
dotnet build $SRCDIR/GVFS.sln --runtime osx-x64 --framework netcoreapp2.0 --configuration $DOTNETCONFIGURATION /maxcpucount:1 || exit 1

dotnet publish $SRCDIR/GVFS.sln /p:Configuration=$DOTNETCONFIGURATION /p:Platform=x64 --runtime osx-x64 --framework netcoreapp2.0 --self-contained --output $PUBLISHDIR /maxcpucount:1 || exit 1

$PUBLISHDIR/GVFS.UnitTests || exit 1
